CREATE OR ALTER PROCEDURE WSO2_FS_EVENT_NOTIFICATION_CLEANUP_DATA_RESTORE_SP
AS

BEGIN

DECLARE @rowCount INT;
DECLARE @enableLog BIT;
DECLARE @logLevel VARCHAR(10);

-- ------------------------------------------
-- CONFIGURABLE ATTRIBUTES
-- ------------------------------------------
SET @enableLog = 'TRUE'; -- ENABLE LOGGING [DEFAULT : TRUE]
SET @logLevel = 'TRACE'; -- SET LOG LEVELS : TRACE



IF (@enableLog = 1) BEGIN
SELECT  '[' + convert(varchar, getdate(), 121) + '] WSO2_FS_EVENT_NOTIFICATION_CLEANUP_DATA_RESTORE_SP STARTED .... !';
END

-- ---------------------

SELECT @rowCount = COUNT(1)  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME IN ('FS_NOTIFICATION');
IF (@rowCount = 1)
BEGIN
IF (@enableLog = 1 AND @logLevel IN ('TRACE')) BEGIN
SELECT  '[' + convert(varchar, getdate(), 121) + '] CLEANUP DATA RESTORATION STARTED ON FS_NOTIFICATION TABLE !';
END
INSERT INTO dbo.FS_NOTIFICATION SELECT A.* FROM dbo.BAK_FS_NOTIFICATION AS A LEFT JOIN dbo.FS_NOTIFICATION AS B ON A.NOTIFICATION_ID = B.NOTIFICATION_ID WHERE B.NOTIFICATION_ID IS NULL;
SELECT @rowCount =  @@rowcount;
IF (@enableLog = 1 ) BEGIN
SELECT  '[' + convert(varchar, getdate(), 121) + '] CLEANUP DATA RESTORATION COMPLETED ON FS_NOTIFICATION WITH '+CAST(@rowCount as varchar)
END
END

-- ---------------------
SET IDENTITY_INSERT FS_NOTIFICATION_EVENT ON;
SELECT @rowCount = COUNT(1)  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME IN ('FS_NOTIFICATION_EVENT');
IF (@rowCount = 1)
BEGIN
IF (@enableLog = 1 AND @logLevel IN ('TRACE')) BEGIN
SELECT  '[' + convert(varchar, getdate(), 121) + '] CLEANUP DATA RESTORATION STARTED ON FS_NOTIFICATION_EVENT TABLE !';
END
INSERT INTO dbo.FS_NOTIFICATION_EVENT (EVENT_ID, NOTIFICATION_ID, EVENT_TYPE, EVENT_INFO) SELECT A.EVENT_ID , A.NOTIFICATION_ID, A.EVENT_TYPE , A.EVENT_INFO FROM dbo.BAK_FS_NOTIFICATION_EVENT AS A LEFT JOIN dbo.FS_NOTIFICATION_EVENT AS B ON A.NOTIFICATION_ID = B.NOTIFICATION_ID WHERE B.NOTIFICATION_ID IS NULL;
SELECT @rowCount =  @@rowcount;
IF (@enableLog = 1 ) BEGIN
SELECT  '[' + convert(varchar, getdate(), 121) + '] CLEANUP DATA RESTORATION COMPLETED ON FS_NOTIFICATION_EVENT WITH '+CAST(@rowCount as varchar)
END
END
SET IDENTITY_INSERT FS_NOTIFICATION_EVENT OFF;
-- ---------------------

SELECT @rowCount = COUNT(1)  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME IN ('FS_NOTIFICATION_ERROR');
IF (@rowCount = 1)
BEGIN
IF (@enableLog = 1 AND @logLevel IN ('TRACE')) BEGIN
SELECT  '[' + convert(varchar, getdate(), 121) + '] CLEANUP DATA RESTORATION STARTED ON FS_NOTIFICATION_ERROR TABLE !';
END
INSERT INTO dbo.FS_NOTIFICATION_ERROR SELECT A.* FROM dbo.BAK_FS_NOTIFICATION_ERROR AS A LEFT JOIN dbo.FS_NOTIFICATION_ERROR AS B ON A.NOTIFICATION_ID = B.NOTIFICATION_ID WHERE B.NOTIFICATION_ID IS NULL;
SELECT @rowCount =  @@rowcount;
IF (@enableLog = 1 ) BEGIN
SELECT  '[' + convert(varchar, getdate(), 121) + '] CLEANUP DATA RESTORATION COMPLETED ON FS_NOTIFICATION_ERROR WITH '+CAST(@rowCount as varchar)
END
END

IF (@enableLog = 1) BEGIN
SELECT  '[' + convert(varchar, getdate(), 121) + '] WSO2_FS_EVENT_NOTIFICATION_CLEANUP_DATA_RESTORE_SP COMPLETED .... !';
END

END
